{
  "name": "signature-animation",
  "type": "registry:ui",
  "registryDependencies": [],
  "dependencies": [
    "react"
  ],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "files": [
    {
      "path": "signature-animation.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\nimport {\n  CheckIcon,\n  CopyIcon,\n  PaletteIcon,\n  PencilIcon,\n  RedoIcon,\n  UndoIcon,\n} from \"lucide-react\"\n\ninterface FontFamily {\n  name: string\n  value: string\n}\n\ninterface SignatureStyle {\n  name: string\n  value: string\n}\n\ninterface AdvancedSignatureCreatorProps {\n  initialName?: string\n  fontFamilies?: FontFamily[]\n  signatureStyles?: SignatureStyle[]\n  colors?: string[]\n  initialFontFamily?: string\n  initialSignatureStyle?: string\n  initialColor?: string\n  initialSize?: number\n  minSize?: number\n  maxSize?: number\n  placeholder?: string\n  signButtonText?: string\n  copiedText?: string\n  copyText?: string\n  signedByText?: string\n  onSign?: (signature: string) => void\n  onCopy?: (signature: string) => void\n  className?: string\n  showControls?: boolean\n  showColorPalette?: boolean\n  showFontSelector?: boolean\n  showStyleSelector?: boolean\n  showSizeSlider?: boolean\n  animationDuration?: number\n  undoLimit?: number\n  backgroundColor?: string\n  signButtonColor?: string\n  signButtonTextColor?: string\n}\n\nconst defaultFontFamilies: FontFamily[] = [\n  { name: \"Signature\", value: '\"Dancing Script\", cursive' },\n  { name: \"Classic\", value: '\"Great Vibes\", cursive' },\n  { name: \"Modern\", value: '\"Alex Brush\", cursive' },\n]\n\nconst defaultSignatureStyles: SignatureStyle[] = [\n  { name: \"No Underline\", value: \"none\" },\n  { name: \"Simple Underline\", value: \"simple\" },\n  { name: \"Wave Underline\", value: \"wave\" },\n]\n\nconst defaultColors = [\n  \"#000000\",\n  \"#0000FF\",\n  \"#006400\",\n  \"#8B0000\",\n  \"#4B0082\",\n  \"#ffffff\",\n]\n\nexport function AdvancedSignatureCreatorComponent({\n  initialName = \"\",\n  fontFamilies = defaultFontFamilies,\n  signatureStyles = defaultSignatureStyles,\n  colors = defaultColors,\n  initialFontFamily = defaultFontFamilies[0].value,\n  initialSignatureStyle = defaultSignatureStyles[0].value,\n  initialColor = defaultColors[1],\n  initialSize = 48,\n  minSize = 24,\n  maxSize = 72,\n  placeholder = \"Enter your name\",\n  signButtonText = \"SIGN\",\n  copiedText = \"Copied!\",\n  copyText = \"Copy Signature\",\n  signedByText = \"SIGNED BY,\",\n  onSign,\n  onCopy,\n  className = \"\",\n  showControls = true,\n  showColorPalette = true,\n  showFontSelector = true,\n  showStyleSelector = true,\n  showSizeSlider = true,\n  animationDuration = 2000,\n  undoLimit = 10,\n  backgroundColor = \"transparent\",\n  signButtonColor = \"black\",\n  signButtonTextColor = \"white\",\n}: AdvancedSignatureCreatorProps) {\n  const [name, setName] = useState(initialName)\n  const [isActive, setIsActive] = useState(initialName.length > 0)\n  const [isSigning, setIsSigning] = useState(false)\n  const [fontFamily, setFontFamily] = useState(initialFontFamily)\n  const [signatureStyle, setSignatureStyle] = useState(initialSignatureStyle)\n  const [color, setColor] = useState(initialColor)\n  const [size, setSize] = useState(initialSize)\n  const [history, setHistory] = useState<string[]>([initialName])\n  const [historyIndex, setHistoryIndex] = useState(0)\n  const [isCopied, setIsCopied] = useState(false)\n  const [isColorPaletteOpen, setIsColorPaletteOpen] = useState(false)\n  const signatureRef = useRef<SVGSVGElement>(null)\n  const colorPaletteRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    setIsActive(name.length > 0)\n  }, [name])\n\n  useEffect(() => {\n    if (name !== history[historyIndex]) {\n      setHistory((prev) =>\n        [...prev.slice(0, historyIndex + 1), name].slice(-undoLimit)\n      )\n      setHistoryIndex((prev) => Math.min(prev + 1, undoLimit - 1))\n    }\n  }, [name, fontFamily, signatureStyle, color, size, historyIndex, undoLimit])\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        colorPaletteRef.current &&\n        !colorPaletteRef.current.contains(event.target as Node)\n      ) {\n        setIsColorPaletteOpen(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside)\n    }\n  }, [])\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value)\n  }\n\n  const handleSign = () => {\n    setIsSigning(true)\n    setTimeout(() => setIsSigning(false), 1000)\n    if (onSign) {\n      onSign(name)\n    }\n  }\n\n  const handleUndo = () => {\n    if (historyIndex > 0) {\n      setHistoryIndex((prev) => prev - 1)\n      setName(history[historyIndex - 1])\n    }\n  }\n\n  const handleRedo = () => {\n    if (historyIndex < history.length - 1) {\n      setHistoryIndex((prev) => prev + 1)\n      setName(history[historyIndex + 1])\n    }\n  }\n\n  const generateSignaturePath = () => {\n    const width = 300\n    const height = 80\n    let path = \"\"\n\n    switch (signatureStyle) {\n      case \"simple\":\n        path = `M10,${height} L${width - 10},${height}`\n        break\n      case \"wave\":\n        path = `M10,${height} Q${width / 4},${height - 10} ${\n          width / 2\n        },${height} T${width - 10},${height}`\n        break\n      default:\n        path = \"\"\n    }\n\n    return path\n  }\n\n  const copySignature = async () => {\n    if (!signatureRef.current) return\n\n    const svgData = new XMLSerializer().serializeToString(signatureRef.current)\n    const svgBlob = new Blob([svgData], { type: \"image/svg+xml;charset=utf-8\" })\n    const svgUrl = URL.createObjectURL(svgBlob)\n\n    const img = new Image()\n    img.onload = async () => {\n      const canvas = document.createElement(\"canvas\")\n      canvas.width = img.width\n      canvas.height = img.height\n      const ctx = canvas.getContext(\"2d\")\n      if (ctx) {\n        ctx.fillStyle = \"white\"\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\n        ctx.drawImage(img, 0, 0)\n        const pngUrl = canvas.toDataURL(\"image/png\")\n\n        const htmlContent = `\n          <div style=\"font-family: ${fontFamily};\">\n            <img src=\"${pngUrl}\" alt=\"${name}'s signature\" style=\"max-width: 100%;\">\n          </div>\n        `\n\n        try {\n          await navigator.clipboard.write([\n            new ClipboardItem({\n              \"text/html\": new Blob([htmlContent], { type: \"text/html\" }),\n              \"text/plain\": new Blob([name], { type: \"text/plain\" }),\n            }),\n          ])\n          setIsCopied(true)\n          setTimeout(() => setIsCopied(false), 2000)\n          if (onCopy) {\n            onCopy(name)\n          }\n        } catch (err) {\n          console.error(\"Failed to copy: \", err)\n        }\n      }\n    }\n    img.src = svgUrl\n  }\n\n  const toggleColorPalette = () => {\n    setIsColorPaletteOpen((prev) => !prev)\n  }\n\n  const handleColorSelect = (selectedColor: string) => {\n    setColor(selectedColor)\n    setIsColorPaletteOpen(false)\n  }\n\n  return (\n    <div\n      className={`min-h-screen flex items-center justify-center p-4 ${className}`}\n      style={{ backgroundColor }}\n    >\n      <div className=\"w-full max-w-[500px] bg-transparent dark:text-white backdrop-blur-xl p-6 md:p-8 shadow-xl border rounded-2xl\">\n        {/* Input Container */}\n        <div className=\"relative mb-6\">\n          <div className=\"flex items-stretch h-[60px] bg-zinc-100/80 rounded-full border border-zinc-200/50 overflow-hidden\">\n            <input\n              type=\"text\"\n              className=\"flex-1 px-4 md:px-6 bg-transparent border-none outline-none text-lg md:text-xl text-black dark:text-black \n                         font-sans placeholder:text-zinc-400\"\n              placeholder={placeholder}\n              value={name}\n              onChange={handleInputChange}\n              required\n            />\n            <button\n              onClick={handleSign}\n              className={`\n                px-4 md:px-6 m-2 rounded-full flex items-center gap-0\n                transition-all duration-300 font-mono text-sm tracking-wide text-black dark:text-black\n                ${\n                  isActive\n                    ? \"opacity-100 hover:opacity-80\"\n                    : \"opacity-50 cursor-not-allowed\"\n                }\n                ${isSigning ? \"scale-95\" : \"\"}\n              `}\n              style={{\n                backgroundColor: signButtonColor,\n                color: signButtonTextColor,\n              }}\n              disabled={!isActive}\n            >\n              <PencilIcon className=\"w-4 h-4\" />\n              <span className=\"hidden md:inline\">{signButtonText}</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Controls */}\n        {showControls && (\n          <div className=\"flex flex-wrap justify-between mb-6 gap-2\">\n            <div className=\"flex gap-2\">\n              <button\n                onClick={handleUndo}\n                className=\"p-2 rounded-full bg-zinc-100 hover:bg-zinc-200 transition-colors\"\n                title=\"Undo\"\n              >\n                <UndoIcon className=\"w-5 h-5 text-black dark:text-black\" />\n              </button>\n              <button\n                onClick={handleRedo}\n                className=\"p-2 rounded-full bg-zinc-100 hover:bg-zinc-200 transition-colors\"\n                title=\"Redo\"\n              >\n                <RedoIcon className=\"w-5 h-5 text-black dark:text-black\" />\n              </button>\n            </div>\n            <div className=\"flex gap-2\">\n              {showFontSelector && (\n                <select\n                  value={fontFamily}\n                  onChange={(e) => setFontFamily(e.target.value)}\n                  className=\"p-2 rounded-full bg-zinc-100 hover:bg-zinc-200 transition-colors text-black dark:text-black\"\n                  title=\"Font Family\"\n                >\n                  {fontFamilies.map((font) => (\n                    <option key={font.name} value={font.value}>\n                      {font.name}\n                    </option>\n                  ))}\n                </select>\n              )}\n              {showStyleSelector && (\n                <select\n                  value={signatureStyle}\n                  onChange={(e) => setSignatureStyle(e.target.value)}\n                  className=\"p-2 rounded-full bg-zinc-100 hover:bg-zinc-200 transition-colors text-black dark:text-black\"\n                  title=\"Signature Style\"\n                >\n                  {signatureStyles.map((style) => (\n                    <option key={style.name} value={style.value}>\n                      {style.name}\n                    </option>\n                  ))}\n                </select>\n              )}\n              {showColorPalette && (\n                <div className=\"relative\" ref={colorPaletteRef}>\n                  <button\n                    onClick={toggleColorPalette}\n                    className=\"p-2 rounded-full bg-zinc-100 hover:bg-zinc-200 transition-colors\"\n                    title=\"Signature Color\"\n                  >\n                    <PaletteIcon className=\"w-5 h-5 text-black dark:text-black\" />\n                  </button>\n                  {isColorPaletteOpen && (\n                    <div className=\"absolute top-full mt-2 right-0 bg-white rounded-lg shadow-lg p-2 flex gap-2 z-10\">\n                      {colors.map((c) => (\n                        <button\n                          key={c}\n                          onClick={() => handleColorSelect(c)}\n                          className=\"w-6 h-6 rounded-full\"\n                          style={{ backgroundColor: c }}\n                        />\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Signature Preview */}\n        <div\n          className={`transition-all duration-500 ${\n            isActive ? \"opacity-100 translate-y-0\" : \"opacity-0 translate-y-4\"\n          }`}\n        >\n          <div className=\"font-mono text-sm text-zinc-400 tracking-wide mb-4 \">\n            {signedByText}\n          </div>\n          <div className=\"signature-container relative \">\n            <svg\n              ref={signatureRef}\n              viewBox=\"0 0 300 100\"\n              className=\"w-full h-24\"\n            >\n              <text\n                x=\"10\"\n                y=\"60\"\n                fontFamily={fontFamily}\n                fontSize={size}\n                fill={color}\n                className=\"signature-text\"\n              >\n                {name}\n              </text>\n              <path\n                d={generateSignaturePath()}\n                fill=\"none\"\n                stroke={color}\n                strokeWidth=\"2\"\n                className=\"signature-path\"\n                transform=\"translate(0, 20)\"\n              />\n            </svg>\n            {showSizeSlider && (\n              <input\n                type=\"range\"\n                min={minSize}\n                max={maxSize}\n                value={size}\n                onChange={(e) => setSize(Number(e.target.value))}\n                className=\"absolute bottom-0 left-0 w-full py-20 bg-transparent hover:bg-transparent\"\n              />\n            )}\n          </div>\n        </div>\n\n        {/* Copy Button */}\n        <div className=\"mt-8 flex justify-end\">\n          <button\n            onClick={copySignature}\n            className={`\n              px-4 py-2 rounded-full bg-black text-white flex items-center gap-2 \n              hover:bg-zinc-800 transition-colors\n              ${isCopied ? \"bg-green-500 hover:bg-green-600\" : \"\"}\n            `}\n          >\n            {isCopied ? (\n              <>\n                <CheckIcon className=\"w-4 h-4\" />\n                {copiedText}\n              </>\n            ) : (\n              <>\n                <CopyIcon className=\"w-4 h-4\" />\n                {copyText}\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      <style jsx global>{`\n        @import url(\"https://fonts.googleapis.com/css2?family=Dancing+Script:wght@600&family=Great+Vibes&family=Alex+Brush&display=swap\");\n\n        .signature-path {\n          stroke-dasharray: 1000;\n          stroke-dashoffset: 1000;\n          animation: sign ${animationDuration}ms forwards\n            cubic-bezier(0.4, 0, 0.2, 1);\n        }\n\n        .signature-text {\n          opacity: 0;\n          animation: fadeIn ${animationDuration / 2}ms forwards\n            ${animationDuration / 4}ms;\n        }\n\n        @keyframes sign {\n          to {\n            stroke-dashoffset: 0;\n          }\n        }\n\n        @keyframes fadeIn {\n          to {\n            opacity: 1;\n          }\n        }\n\n        .signature-container {\n          position: relative;\n          overflow: hidden;\n        }\n\n        input[type=\"range\"] {\n          -webkit-appearance: none;\n          appearance: none;\n          width: 100%;\n          height: 2px;\n          background: #ddd;\n          outline: none;\n          opacity: 0;\n          transition: opacity 0.2s;\n        }\n\n        .signature-container:hover input[type=\"range\"] {\n          opacity: 1;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n          -webkit-appearance: none;\n          appearance: none;\n          width: 12px;\n          height: 12px;\n          background: #000;\n          cursor: pointer;\n          border-radius: 50%;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n          width: 12px;\n          height: 12px;\n          background: #000;\n          cursor: pointer;\n          border-radius: 50%;\n        }\n      `}</style>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}